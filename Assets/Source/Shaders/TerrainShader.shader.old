Shader "CustomShaders/TerrainShader"
{
    Properties
    {
        _MainTex("Texture", 2D) = "white" {}

        // Grid
        _DrawGrid("DrawGrid", int) = 0
        _GridSize("GridSize", float) = 0.05
        _GridColor("GridColor", COLOR) = (1, 0, 0, 1)

        // Selected Tile
        _SelectedPos("SelectedPos", VECTOR) = (0, 0, 0)
        _SelectedAreaSize("SelectedAreaSize", int) = 1
        _SelectedColor("SelectedColor", COLOR) = (1, 0, 0, 1)
        _EnableSelectedRendering("EnableSelectedRendering", int) = 0
        _RenderCircle("RenderCircle", int) = 0
    }
        SubShader
    {
        Tags { "RenderType" = "Opaque" }
        LOD 100

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
                float4 worldPos : float;
            };

            sampler2D _MainTex;
            float4 _MainTex_ST;

            // Grid
            int _DrawGrid;
            float _GridSize;
            float4 _GridColor;
            
            // Selected Tile
            float4 _SelectedPos;
            int _SelectedAreaSize;
            float4 _SelectedColor;
            int _EnableSelectedRendering;
            int _RenderCircle;
            float4x4 _RotationMatrix;

            v2f vert(appdata v)
            {
                v2f o;

                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = TRANSFORM_TEX(v.uv, _MainTex);
                o.worldPos = mul(unity_ObjectToWorld, v.vertex);
                o.worldPos = mul(_RotationMatrix, o.worldPos);

                return o;
            }

            fixed4 frag(v2f i) : SV_Target
            {
                int result = 0;
                int wx = (int)i.worldPos.x;
                int wz = (int)i.worldPos.z;
                int selx = (int)_SelectedPos.x;
                int selz = (int)_SelectedPos.z;

                float wxmod = i.worldPos.x - wx;
                float wzmod = i.worldPos.z - wz;


                // Grid
                if (_DrawGrid > 0)
                {
                    if (wxmod < _GridSize || wxmod > 1 - _GridSize ||
                        wzmod < _GridSize || wzmod > 1 - _GridSize)
                    {
                        result = 1;
                    }
                }

                // Selected Tile
                if (_EnableSelectedRendering > 0)
                {
                    float selectionSizeHalf = _SelectedAreaSize / 2.0;
                    int iselectionSizeHalf = (int)selectionSizeHalf;

                    float xMin = selx - iselectionSizeHalf;
                    float xMax = selx + iselectionSizeHalf;
                    float zMin = selz - iselectionSizeHalf;
                    float zMax = selz + iselectionSizeHalf;

                    if (_RenderCircle == 0)
                    {
                        // check if we have an uneven number for our selected area size, if yes we need to either decrease our min or increase our max
                        if (selectionSizeHalf < iselectionSizeHalf || selectionSizeHalf > iselectionSizeHalf)
                        {
                            xMax++;
                            zMax++;
                        }

                        if (i.worldPos.x >= xMin && i.worldPos.x <= xMax &&
                            i.worldPos.z >= zMin && i.worldPos.z <= zMax &&
                            (wxmod < _GridSize || wxmod > 1 - _GridSize ||
                             wzmod < _GridSize || wzmod > 1 - _GridSize))
                        {
                            result = 2;
                        }
                    }
                    else
                    {
                        if (wxmod < _GridSize || wxmod > 1 - _GridSize ||
                            wzmod < _GridSize || wzmod > 1 - _GridSize)
                        {
                            if ((wx - selx) * (wx - selx) + (wz - selz) * (wz - selz) 
                                <= iselectionSizeHalf * iselectionSizeHalf)
                                result = 2;
                        }
                    }
                }

                switch (result)
                {
                    default:
                        break;

                    case 1:
                        return _GridColor;

                    case 2:
                        return _SelectedColor;
                }

                // sample the texture
                return tex2D(_MainTex, i.uv);
            }
        ENDCG
    }
    }
}
